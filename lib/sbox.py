import crypto_tool
import math

AES = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


Skinny4 =  [0xc, 6, 9, 0, 1, 0xa, 2, 0xb, 3, 8, 5, 0xd, 4, 0xe, 7, 0xf]



Skinny8 = [
    0x65, 0x4c, 0x6a, 0x42, 0x4b, 0x63, 0x43, 0x6b, 0x55, 0x75, 0x5a, 0x7a, 
    0x53, 0x73, 0x5b, 0x7b, 0x35, 0x8c, 0x3a, 0x81, 0x89, 0x33, 0x80, 0x3b, 
    0x95, 0x25, 0x98, 0x2a, 0x90, 0x23, 0x99, 0x2b, 0xe5, 0xcc, 0xe8, 0xc1, 
    0xc9, 0xe0, 0xc0, 0xe9, 0xd5, 0xf5, 0xd8, 0xf8, 0xd0, 0xf0, 0xd9, 0xf9, 
    0xa5, 0x1c, 0xa8, 0x12, 0x1b, 0xa0, 0x13, 0xa9, 0x05, 0xb5, 0x0a, 0xb8, 
    0x03, 0xb0, 0x0b, 0xb9, 0x32, 0x88, 0x3c, 0x85, 0x8d, 0x34, 0x84, 0x3d, 
    0x91, 0x22, 0x9c, 0x2c, 0x94, 0x24, 0x9d, 0x2d, 0x62, 0x4a, 0x6c, 0x45, 
    0x4d, 0x64, 0x44, 0x6d, 0x52, 0x72, 0x5c, 0x7c, 0x54, 0x74, 0x5d, 0x7d, 
    0xa1, 0x1a, 0xac, 0x15, 0x1d, 0xa4, 0x14, 0xad, 0x02, 0xb1, 0x0c, 0xbc, 
    0x04, 0xb4, 0x0d, 0xbd, 0xe1, 0xc8, 0xec, 0xc5, 0xcd, 0xe4, 0xc4, 0xed, 
    0xd1, 0xf1, 0xdc, 0xfc, 0xd4, 0xf4, 0xdd, 0xfd, 0x36, 0x8e, 0x38, 0x82, 
    0x8b, 0x30, 0x83, 0x39, 0x96, 0x26, 0x9a, 0x28, 0x93, 0x20, 0x9b, 0x29, 
    0x66, 0x4e, 0x68, 0x41, 0x49, 0x60, 0x40, 0x69, 0x56, 0x76, 0x58, 0x78, 
    0x50, 0x70, 0x59, 0x79, 0xa6, 0x1e, 0xaa, 0x11, 0x19, 0xa3, 0x10, 0xab, 
    0x06, 0xb6, 0x08, 0xba, 0x00, 0xb3, 0x09, 0xbb, 0xe6, 0xce, 0xea, 0xc2, 
    0xcb, 0xe3, 0xc3, 0xeb, 0xd6, 0xf6, 0xda, 0xfa, 0xd3, 0xf3, 0xdb, 0xfb, 
    0x31, 0x8a, 0x3e, 0x86, 0x8f, 0x37, 0x87, 0x3f, 0x92, 0x21, 0x9e, 0x2e, 
    0x97, 0x27, 0x9f, 0x2f, 0x61, 0x48, 0x6e, 0x46, 0x4f, 0x67, 0x47, 0x6f, 
    0x51, 0x71, 0x5e, 0x7e, 0x57, 0x77, 0x5f, 0x7f, 0xa2, 0x18, 0xae, 0x16, 
    0x1f, 0xa7, 0x17, 0xaf, 0x01, 0xb2, 0x0e, 0xbe, 0x07, 0xb7, 0x0f, 0xbf, 
    0xe2, 0xca, 0xee, 0xc6, 0xcf, 0xe7, 0xc7, 0xef, 0xd2, 0xf2, 0xde, 0xfe, 
    0xd7, 0xf7, 0xdf, 0xff
]

Piccolo = [
    0xe,4,0xb,2,3,8,0,9,1,0xa,7,0xf,6,0xc,5,0xd
] 

LDC = [
    0xE, 4, 0xD, 1, 2, 0xF, 0xB, 8, 3, 0xA, 6, 0xC, 5, 9, 0, 7
]

my01 = [0,1,2,174,4,82,7,191,8,171,15,3,12,253,10,21,16,17,86,250,83,5,20,169,24,187,91,87,94,175,28,6,32,33,34,47,36,114,39,60,139,40,142,35,143,126,137,53,200,203,202,229,189,239,248,194,105,224,110,201,27,196,89,238,64,65,66,198,112,102,55,231,72,195,79,67,120,225,58,101,84,85,18,150,103,113,100,177,92,215,31,19,106,243,108,54,116,117,50,63,68,22,71,88,247,124,182,51,199,26,193,81,176,179,246,217,241,167,180,138,57,152,122,245,127,140,61,166,128,131,130,14,132,210,133,29,168,9,173,129,172,95,170,151,144,147,214,90,209,135,148,11,184,25,249,213,254,13,188,134,220,223,154,181,236,190,237,208,125,244,62,153,77,146,75,251,48,49,118,123,115,37,52,42,155,56,218,119,221,44,159,38,232,235,234,78,216,206,157,109,192,73,197,233,240,107,178,207,252,255,186,30,205,219,204,59,212,93,149,185,226,121,228,158,160,163,162,141,164,242,165,156,41,136,46,161,45,222,43,183,96,97,98,111,23,69,80,74,227,104,230,99,145,76,211,70]
dxf01 = [0,1,2,67,4,85,134,151,8,9,170,235,93,12,63,46,16,17,18,83,84,5,214,199,186,251,24,25,111,126,13,92,32,33,34,99,36,117,166,183,168,169,10,75,253,172,159,142,116,37,246,231,48,49,50,115,222,207,252,173,91,26,185,184,64,21,66,215,68,65,198,3,72,29,234,127,73,76,171,110,69,80,135,82,81,20,19,150,47,250,77,88,62,187,28,89,232,189,74,223,236,233,206,11,96,53,98,247,97,100,35,230,249,188,27,158,237,248,143,90,51,182,113,52,114,167,112,101,128,161,42,203,132,245,174,31,136,41,130,227,125,140,55,6,144,177,58,219,212,165,254,79,146,243,152,57,103,86,45,220,138,107,160,129,14,191,164,213,162,195,40,137,23,38,221,44,94,239,244,133,154,123,176,145,124,141,118,71,153,56,211,178,208,229,122,15,148,241,190,155,216,109,210,39,121,156,179,22,181,192,95,106,225,196,139,238,119,194,61,200,70,163,204,105,242,7,120,205,54,147,60,217,218,175,240,197,59,30,209,180,131,102,201,108,87,226,157,104,193,228,43,78,224,149,202,255]

def sbox2truthtable(S):
    n = len(S)
    bitn = int(math.log2(n))
    res = ''
    def outline(a,n):
        res = ''
        for i in range(n):
            res += str(a[i])+',' 
        for i in range(n,len(a)):
            res += ','+str(a[i])
        res += '\n'
        return res
    vnames = []
    for i in range(bitn): vnames.append( chr(ord('A')+i) )
    for i in range(bitn): vnames.append( chr(ord('a')+i) )
    res += outline(vnames,bitn)
    for i in range(n):
        x = crypto_tool.int2b(i,bitn)
        x += crypto_tool.int2b(S[i],bitn)
        res += outline(x, bitn)   
    return res

def sbox2truthtable_1output(S, f):
    n = len(S)
    bitn = int(math.log2(n))
    assert 0 <= f < n
    res = ''
    def outline(a,n):
        res = ''
        for i in range(n):
            res += str(a[i]) + ','
        res += ',' + str(a[n]) + '\n'
        return res
    
    vname = []
    for i in range(bitn): vname.append( chr(ord('A')+i) )
    vname.append('Z')
    res += outline(vname, bitn)
    for i in range(n):
        x = crypto_tool.int2b(i, bitn)
        x.append(crypto_tool.int2b(S[i], bitn)[f])
        res += outline(x, bitn)
    return res


if __name__ == "__main__":
    print(sbox2truthtable_1output(AES, 0))